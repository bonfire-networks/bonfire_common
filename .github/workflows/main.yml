name: Main branch

on:
  push:
    branches:
      - "main"
    paths-ignore:
        - '.envrc'
        - '.gitignore'
        - README.*
        - LICENSE
  pull_request:
    paths-ignore:
        - '.envrc'
        - '.gitignore'
        - README.*
        - LICENSE
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read

# Stop previous jobs if they are still running.
# https://docs.github.com/en/actions/learn-github-actions/expressions
# https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
concurrency:
  # Use github.run_id on main branch
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # Use github.ref on other branches, so it's unique per branch
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    name: Build, Prepare Localise, Test, Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - id: setup
      name: Determine Elixir and OTP versions
      run: |
        ls -la && chmod +x tool-versions-to-env.sh
        # Run the script to extract versions and save to output
        ./tool-versions-to-env.sh 2 

    - name: Add Prebuilt-MPR Repository
      run: |
        wget -qO - 'https://proget.makedeb.org/debian-feeds/prebuilt-mpr.pub' | gpg --dearmor | sudo tee /usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg 1> /dev/null
        echo "deb [arch=all,$(dpkg --print-architecture) signed-by=/usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg] https://proget.makedeb.org prebuilt-mpr $(lsb_release -cs)" | sudo tee /etc/apt/sources.list.d/prebuilt-mpr.list
        sudo apt update
      shell: bash

    - name: Install just
      run: sudo apt install just
      shell: bash

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.ERLANG_VERSION }}

    - name: Restore cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-

    - name: Setup deps
      run: just deps-get
      shell: bash
      env:
        MIX_ENV: test
        
    - name: Save deps cache
      uses: actions/cache/save@v4
      with:
        path: |
          deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Check if TX is configured
      id: check_tx_folder
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      env:
        TX_TOKEN_EXISTS: ${{ secrets.TX_TOKEN != '' || vars.TX_TOKEN != '' }}
      run: |
        if [ -d ".tx" ] && [ "$TX_TOKEN_EXISTS" == "true" ]; then
          echo "tx_enabled=true" >> $GITHUB_OUTPUT
        else
          echo "tx_enabled=false" >> $GITHUB_OUTPUT
        fi

    - name: Extract and push localisation strings
      if: ${{ steps.check_tx_folder.outputs.tx_enabled == 'true' }}
      run: mix gettext.extract
      env:
        MIX_ENV: test
    
    - name: Save build cache
      uses: actions/cache/save@v4
      with:
        path: |
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Push source file using transifex client
      if: ${{ steps.check_tx_folder.outputs.tx_enabled == 'true' }}
      uses: transifex/cli-action@v2
      with:
        token: ${{ secrets.TX_TOKEN || vars.TX_TOKEN }}
    
    - name: Run tests
      run: DB_STARTUP_TIME=10 just test
      shell: bash
      env:
        MIX_ENV: test
              
    - name: Run linting
      run: just lint
      env:
        MIX_ENV: test
        
    # - name: Run tests
    #   uses: bonfire-networks/bonfire-extension-ci-action@latest
    #   with:
    #     elixir-version: ${{ needs.setup.outputs.elixir-version }}
    #     otp-version: ${{ needs.setup.outputs.otp-version }}
